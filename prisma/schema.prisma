// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model QuranApiToken {
  id         Int      @id @default(autoincrement())
  token      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("quran_api_tokens")
}

model Guild {
  id        Int      @id @default(autoincrement())
  discordId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  settings  GuildSetting?
}

model GuildSetting {
  id            Int      @id @default(autoincrement())
  guild         Guild    @relation(fields: [guildId], references: [id])
  guildId       Int      @unique
  language      String   @default("en")
  logChannelId String?
  quizChannelId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id        String @id @default(uuid())
  discordId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  settings  UserSetting?
  experience UserExperience?
  streak    UserStreak?
  quizStatsTypeOne QuranQuizTypeOneStats?
  quizStatsTypeTwo QuranQuizTypeTwoStats?
  quizStatsTypeThree QuranQuizTypeThreeStats?
  quizStatsTypeFour QuranQuizTypeFourStats?

  quizQueue QuranQuizQueue?
}

model UserSetting {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  theme     String   @default("light")
  language  String   @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserExperience {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  experience Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model UserStreak {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  streak    Int      @default(0)
  lastActive DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuranQuizTypeOneStats {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  attempts  Int      @default(0)
  attemptsToday Int      @default(0)
  streaks    Int      @default(0)
  timeouts   Int      @default(0)
  corrects   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model QuranQuizTypeTwoStats {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  attempts  Int      @default(0)
  attemptsToday Int      @default(0)
  streaks    Int      @default(0)
  timeouts   Int      @default(0)
  corrects   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model QuranQuizTypeThreeStats {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  attempts  Int      @default(0)
  attemptsToday Int      @default(0)
  streaks    Int      @default(0)
  timeouts   Int      @default(0)
  corrects   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model QuranQuizTypeFourStats {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  attempts  Int      @default(0)
  attemptsToday Int      @default(0)
  streaks    Int      @default(0)
  timeouts   Int      @default(0)
  corrects   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model QuranQuizQueue {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}